version: 2.1
commands:
  save_deps_cache:
    steps:
      - save_cache:
          key: v1-mix-deps-cache-{{ checksum "mix.lock" }}
          paths: ["deps"]
  restore_deps_cache:
    steps:
      - restore_cache:
          keys:
            - v1-mix-deps-cache-{{ checksum "mix.lock" }}
            - v1-mix-deps-cache-
  save_build_cache:
    parameters:
      env:
        description: Mix environment
        type: string
        default: dev
    steps:
      - save_cache:
          key: v2-build-cache-{{ arch }}-<< parameters.env >>-{{ checksum "mix.lock" }}
          paths: ["_build/<< parameters.env >>"]
  restore_build_cache:
    parameters:
      env:
        description: Mix environment
        type: string
        default: dev
    steps:
      - restore_cache:
          keys:
            - v2-build-cache-{{ arch }}-<< parameters.env >>-{{ checksum "mix.lock" }}
            - v2-build-cache-{{ arch }}-<< parameters.env >>-
            - v2-build-cache-{{ arch }}-
  gen_version_file:
    steps:
      - run: asdf current erlang > .runtime_version
      - run: asdf current elixir >> .runtime_version
  save_plt_cache:
    steps:
      - save_cache:
          key: v1-dialyzer-cache-{{ checksum ".runtime_version" }}-{{ checksum "mix.lock" }}
          paths: "priv/plts"
  restore_plt_cache:
    steps:
      - restore_cache:
          keys:
            - v1-dialyzer-cache-{{ checksum ".runtime_version" }}-{{ checksum "mix.lock" }}
            - v1-dialyzer-cache-{{ checksum ".runtime_version" }}-
            - v1-dialyzer-cache-
  run_tests:
    parameters:
      glob:
        type: string
      split_by:
        default: filesize
        type: string
      command:
        type: string
    steps:
      - run:
          command: |
            circleci tests glob "<<parameters.glob>>" \
            | circleci tests split --split-by=<<parameters.split_by>> \
            | xargs <<parameters.command>>
jobs:
  get_deps:
    docker:
      - image: membraneframeworklabs/docker_membrane

    working_directory: ~/app

    steps:
      - checkout
      - restore_deps_cache
      - run: mix deps.get
      - save_deps_cache
      - persist_to_workspace:
          root: .
          paths: "*"

  build_test:
    docker:
      - image: membraneframeworklabs/docker_membrane
        environment:
          MIX_ENV: test

    working_directory: ~/app

    steps:
      - attach_workspace:
          at: .
      - restore_build_cache:
          env: test
      - run: mix deps.compile
      - run: mix compile --force --warnings-as-errors
      - save_build_cache:
          env: test
      - run: mix deps.unlock --check-unused

  test:
    docker:
      - image: membraneframeworklabs/docker_membrane
        environment:
          MIX_ENV: test

    working_directory: ~/app
    parallelism: 4

    steps:
      - attach_workspace:
          at: .
      - restore_build_cache:
          env: test
      - run: mix compile
      - run_tests:
          glob: "test/membrane/**/*.exs"
          split_by: "timings"
          command: "mix test --include long_running"
      - store_test_results:
          path: "_build/test/lib/membrane_core"

  lint:
    docker:
      - image: membraneframeworklabs/docker_membrane
        environment:
          MIX_ENV: dev

    working_directory: ~/app

    steps:
      - attach_workspace:
          at: .
      - restore_build_cache:
          env: dev
      - run: mix compile
      - save_build_cache:
          env: dev
      - run: mix format --check-formatted
      - run: mix credo
      - run: mix docs && mix docs 2>&1 | (! grep -q "warning:")
      - gen_version_file
      - restore_plt_cache
      - run: mix dialyzer
      - save_plt_cache

  test_performance: 
    machine: true
    resource_class: membraneframework/core-performance-test
    working_directory: ~/app

    steps:
      - attach_workspace:
          at: .
      - run: cp -r benchmark/ ~/benchmark_backup/
      - run: cp mix.exs ~/benchmark_backup/
      - run: docker run -e MIX_ENV=benchmark -v ./:/root/app -v ~/results:/root/results -w /root/app membraneframeworklabs/docker_membrane mix do deps.get, deps.compile --force --all, run benchmark/run.exs /root/results/feature_branch_results
      - run: git checkout -f master
      - run: cp  ~/benchmark_backup/mix.exs ~/app
      - run: docker run -e MIX_ENV=benchmark -v ./:/root/app -v ~/results:/root/results -v ~/benchmark_backup/benchmark:/root/app/benchmark -w /root/app membraneframeworklabs/docker_membrane mix do deps.get, deps.compile --force --all, run benchmark/run.exs /root/results/master_results
      - run: docker run -e MIX_ENV=benchmark -v ./:/root/app -v ~/results:/root/results -v ~/benchmark_backup/benchmark:/root/app/benchmark -w /root/app membraneframeworklabs/docker_membrane mix run benchmark/compare.exs /root/results/feature_branch_results /root/results/master_results
      - run: 
          command: rm ~/results/*
          when: always


workflows:
  version: 2
  build_and_test:
    jobs:
      - get_deps
      - build_test:
          requires:
            - get_deps
      - test:
          requires:
            - get_deps
      - lint:
          requires:
            - get_deps
      - request_performance_test:
          type: approval
          filters:
            branches:
              ignore: 
                - /pull\/[0-9]+/
                - /master/
      - test_performance:
          filters:
            branches:
              ignore: 
                - /pull\/[0-9]+/
                - /master/
          requires:
            - get_deps
            - request_performance_test
